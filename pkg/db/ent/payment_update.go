// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/account-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/account-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// Where appends a list predicates to the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PaymentUpdate) SetCreatedAt(u uint32) *PaymentUpdate {
	pu.mutation.ResetCreatedAt()
	pu.mutation.SetCreatedAt(u)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCreatedAt(u *uint32) *PaymentUpdate {
	if u != nil {
		pu.SetCreatedAt(*u)
	}
	return pu
}

// AddCreatedAt adds u to the "created_at" field.
func (pu *PaymentUpdate) AddCreatedAt(u int32) *PaymentUpdate {
	pu.mutation.AddCreatedAt(u)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PaymentUpdate) SetUpdatedAt(u uint32) *PaymentUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(u)
	return pu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pu *PaymentUpdate) AddUpdatedAt(u int32) *PaymentUpdate {
	pu.mutation.AddUpdatedAt(u)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PaymentUpdate) SetDeletedAt(u uint32) *PaymentUpdate {
	pu.mutation.ResetDeletedAt()
	pu.mutation.SetDeletedAt(u)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableDeletedAt(u *uint32) *PaymentUpdate {
	if u != nil {
		pu.SetDeletedAt(*u)
	}
	return pu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pu *PaymentUpdate) AddDeletedAt(u int32) *PaymentUpdate {
	pu.mutation.AddDeletedAt(u)
	return pu
}

// SetAccountID sets the "account_id" field.
func (pu *PaymentUpdate) SetAccountID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetAccountID(u)
	return pu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAccountID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetAccountID(*u)
	}
	return pu
}

// ClearAccountID clears the value of the "account_id" field.
func (pu *PaymentUpdate) ClearAccountID() *PaymentUpdate {
	pu.mutation.ClearAccountID()
	return pu
}

// SetCollectingTid sets the "collecting_tid" field.
func (pu *PaymentUpdate) SetCollectingTid(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetCollectingTid(u)
	return pu
}

// SetNillableCollectingTid sets the "collecting_tid" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCollectingTid(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetCollectingTid(*u)
	}
	return pu
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (pu *PaymentUpdate) ClearCollectingTid() *PaymentUpdate {
	pu.mutation.ClearCollectingTid()
	return pu
}

// SetAvailableAt sets the "available_at" field.
func (pu *PaymentUpdate) SetAvailableAt(u uint32) *PaymentUpdate {
	pu.mutation.ResetAvailableAt()
	pu.mutation.SetAvailableAt(u)
	return pu
}

// SetNillableAvailableAt sets the "available_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAvailableAt(u *uint32) *PaymentUpdate {
	if u != nil {
		pu.SetAvailableAt(*u)
	}
	return pu
}

// AddAvailableAt adds u to the "available_at" field.
func (pu *PaymentUpdate) AddAvailableAt(u int32) *PaymentUpdate {
	pu.mutation.AddAvailableAt(u)
	return pu
}

// ClearAvailableAt clears the value of the "available_at" field.
func (pu *PaymentUpdate) ClearAvailableAt() *PaymentUpdate {
	pu.mutation.ClearAvailableAt()
	return pu
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PaymentUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if payment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized payment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := payment.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAccountID,
		})
	}
	if pu.mutation.AccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: payment.FieldAccountID,
		})
	}
	if value, ok := pu.mutation.CollectingTid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldCollectingTid,
		})
	}
	if pu.mutation.CollectingTidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: payment.FieldCollectingTid,
		})
	}
	if value, ok := pu.mutation.AvailableAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldAvailableAt,
		})
	}
	if value, ok := pu.mutation.AddedAvailableAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldAvailableAt,
		})
	}
	if pu.mutation.AvailableAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: payment.FieldAvailableAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *PaymentUpdateOne) SetCreatedAt(u uint32) *PaymentUpdateOne {
	puo.mutation.ResetCreatedAt()
	puo.mutation.SetCreatedAt(u)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCreatedAt(u *uint32) *PaymentUpdateOne {
	if u != nil {
		puo.SetCreatedAt(*u)
	}
	return puo
}

// AddCreatedAt adds u to the "created_at" field.
func (puo *PaymentUpdateOne) AddCreatedAt(u int32) *PaymentUpdateOne {
	puo.mutation.AddCreatedAt(u)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PaymentUpdateOne) SetUpdatedAt(u uint32) *PaymentUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(u)
	return puo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (puo *PaymentUpdateOne) AddUpdatedAt(u int32) *PaymentUpdateOne {
	puo.mutation.AddUpdatedAt(u)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PaymentUpdateOne) SetDeletedAt(u uint32) *PaymentUpdateOne {
	puo.mutation.ResetDeletedAt()
	puo.mutation.SetDeletedAt(u)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableDeletedAt(u *uint32) *PaymentUpdateOne {
	if u != nil {
		puo.SetDeletedAt(*u)
	}
	return puo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (puo *PaymentUpdateOne) AddDeletedAt(u int32) *PaymentUpdateOne {
	puo.mutation.AddDeletedAt(u)
	return puo
}

// SetAccountID sets the "account_id" field.
func (puo *PaymentUpdateOne) SetAccountID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetAccountID(u)
	return puo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAccountID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetAccountID(*u)
	}
	return puo
}

// ClearAccountID clears the value of the "account_id" field.
func (puo *PaymentUpdateOne) ClearAccountID() *PaymentUpdateOne {
	puo.mutation.ClearAccountID()
	return puo
}

// SetCollectingTid sets the "collecting_tid" field.
func (puo *PaymentUpdateOne) SetCollectingTid(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetCollectingTid(u)
	return puo
}

// SetNillableCollectingTid sets the "collecting_tid" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCollectingTid(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetCollectingTid(*u)
	}
	return puo
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (puo *PaymentUpdateOne) ClearCollectingTid() *PaymentUpdateOne {
	puo.mutation.ClearCollectingTid()
	return puo
}

// SetAvailableAt sets the "available_at" field.
func (puo *PaymentUpdateOne) SetAvailableAt(u uint32) *PaymentUpdateOne {
	puo.mutation.ResetAvailableAt()
	puo.mutation.SetAvailableAt(u)
	return puo
}

// SetNillableAvailableAt sets the "available_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAvailableAt(u *uint32) *PaymentUpdateOne {
	if u != nil {
		puo.SetAvailableAt(*u)
	}
	return puo
}

// AddAvailableAt adds u to the "available_at" field.
func (puo *PaymentUpdateOne) AddAvailableAt(u int32) *PaymentUpdateOne {
	puo.mutation.AddAvailableAt(u)
	return puo
}

// ClearAvailableAt clears the value of the "available_at" field.
func (puo *PaymentUpdateOne) ClearAvailableAt() *PaymentUpdateOne {
	puo.mutation.ClearAvailableAt()
	return puo
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Payment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PaymentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PaymentUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if payment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized payment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := payment.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAccountID,
		})
	}
	if puo.mutation.AccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: payment.FieldAccountID,
		})
	}
	if value, ok := puo.mutation.CollectingTid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldCollectingTid,
		})
	}
	if puo.mutation.CollectingTidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: payment.FieldCollectingTid,
		})
	}
	if value, ok := puo.mutation.AvailableAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldAvailableAt,
		})
	}
	if value, ok := puo.mutation.AddedAvailableAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldAvailableAt,
		})
	}
	if puo.mutation.AvailableAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: payment.FieldAvailableAt,
		})
	}
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
