// Code generated by ent, DO NOT EDIT.

package contract

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/account-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// PledgeID applies equality check predicate on the "pledge_id" field. It's identical to PledgeIDEQ.
func PledgeID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPledgeID), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// Backup applies equality check predicate on the "backup" field. It's identical to BackupEQ.
func Backup(v bool) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackup), v))
	})
}

// ContractType applies equality check predicate on the "contract_type" field. It's identical to ContractTypeEQ.
func ContractType(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodID)))
	})
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodID)))
	})
}

// PledgeIDEQ applies the EQ predicate on the "pledge_id" field.
func PledgeIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPledgeID), v))
	})
}

// PledgeIDNEQ applies the NEQ predicate on the "pledge_id" field.
func PledgeIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPledgeID), v))
	})
}

// PledgeIDIn applies the In predicate on the "pledge_id" field.
func PledgeIDIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPledgeID), v...))
	})
}

// PledgeIDNotIn applies the NotIn predicate on the "pledge_id" field.
func PledgeIDNotIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPledgeID), v...))
	})
}

// PledgeIDGT applies the GT predicate on the "pledge_id" field.
func PledgeIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPledgeID), v))
	})
}

// PledgeIDGTE applies the GTE predicate on the "pledge_id" field.
func PledgeIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPledgeID), v))
	})
}

// PledgeIDLT applies the LT predicate on the "pledge_id" field.
func PledgeIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPledgeID), v))
	})
}

// PledgeIDLTE applies the LTE predicate on the "pledge_id" field.
func PledgeIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPledgeID), v))
	})
}

// PledgeIDIsNil applies the IsNil predicate on the "pledge_id" field.
func PledgeIDIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPledgeID)))
	})
}

// PledgeIDNotNil applies the NotNil predicate on the "pledge_id" field.
func PledgeIDNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPledgeID)))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountID)))
	})
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountID)))
	})
}

// BackupEQ applies the EQ predicate on the "backup" field.
func BackupEQ(v bool) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackup), v))
	})
}

// BackupNEQ applies the NEQ predicate on the "backup" field.
func BackupNEQ(v bool) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBackup), v))
	})
}

// BackupIsNil applies the IsNil predicate on the "backup" field.
func BackupIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBackup)))
	})
}

// BackupNotNil applies the NotNil predicate on the "backup" field.
func BackupNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBackup)))
	})
}

// ContractTypeEQ applies the EQ predicate on the "contract_type" field.
func ContractTypeEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractType), v))
	})
}

// ContractTypeNEQ applies the NEQ predicate on the "contract_type" field.
func ContractTypeNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContractType), v))
	})
}

// ContractTypeIn applies the In predicate on the "contract_type" field.
func ContractTypeIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContractType), v...))
	})
}

// ContractTypeNotIn applies the NotIn predicate on the "contract_type" field.
func ContractTypeNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContractType), v...))
	})
}

// ContractTypeGT applies the GT predicate on the "contract_type" field.
func ContractTypeGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContractType), v))
	})
}

// ContractTypeGTE applies the GTE predicate on the "contract_type" field.
func ContractTypeGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContractType), v))
	})
}

// ContractTypeLT applies the LT predicate on the "contract_type" field.
func ContractTypeLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContractType), v))
	})
}

// ContractTypeLTE applies the LTE predicate on the "contract_type" field.
func ContractTypeLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContractType), v))
	})
}

// ContractTypeContains applies the Contains predicate on the "contract_type" field.
func ContractTypeContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContractType), v))
	})
}

// ContractTypeHasPrefix applies the HasPrefix predicate on the "contract_type" field.
func ContractTypeHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContractType), v))
	})
}

// ContractTypeHasSuffix applies the HasSuffix predicate on the "contract_type" field.
func ContractTypeHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContractType), v))
	})
}

// ContractTypeIsNil applies the IsNil predicate on the "contract_type" field.
func ContractTypeIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContractType)))
	})
}

// ContractTypeNotNil applies the NotNil predicate on the "contract_type" field.
func ContractTypeNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContractType)))
	})
}

// ContractTypeEqualFold applies the EqualFold predicate on the "contract_type" field.
func ContractTypeEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContractType), v))
	})
}

// ContractTypeContainsFold applies the ContainsFold predicate on the "contract_type" field.
func ContractTypeContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContractType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		p(s.Not())
	})
}
