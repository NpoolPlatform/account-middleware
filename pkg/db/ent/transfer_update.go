// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/account-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/account-middleware/pkg/db/ent/transfer"
	"github.com/google/uuid"
)

// TransferUpdate is the builder for updating Transfer entities.
type TransferUpdate struct {
	config
	hooks     []Hook
	mutation  *TransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransferUpdate builder.
func (tu *TransferUpdate) Where(ps ...predicate.Transfer) *TransferUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransferUpdate) SetCreatedAt(u uint32) *TransferUpdate {
	tu.mutation.ResetCreatedAt()
	tu.mutation.SetCreatedAt(u)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableCreatedAt(u *uint32) *TransferUpdate {
	if u != nil {
		tu.SetCreatedAt(*u)
	}
	return tu
}

// AddCreatedAt adds u to the "created_at" field.
func (tu *TransferUpdate) AddCreatedAt(u int32) *TransferUpdate {
	tu.mutation.AddCreatedAt(u)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransferUpdate) SetUpdatedAt(u uint32) *TransferUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(u)
	return tu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tu *TransferUpdate) AddUpdatedAt(u int32) *TransferUpdate {
	tu.mutation.AddUpdatedAt(u)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransferUpdate) SetDeletedAt(u uint32) *TransferUpdate {
	tu.mutation.ResetDeletedAt()
	tu.mutation.SetDeletedAt(u)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableDeletedAt(u *uint32) *TransferUpdate {
	if u != nil {
		tu.SetDeletedAt(*u)
	}
	return tu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tu *TransferUpdate) AddDeletedAt(u int32) *TransferUpdate {
	tu.mutation.AddDeletedAt(u)
	return tu
}

// SetEntID sets the "ent_id" field.
func (tu *TransferUpdate) SetEntID(u uuid.UUID) *TransferUpdate {
	tu.mutation.SetEntID(u)
	return tu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableEntID(u *uuid.UUID) *TransferUpdate {
	if u != nil {
		tu.SetEntID(*u)
	}
	return tu
}

// SetAppID sets the "app_id" field.
func (tu *TransferUpdate) SetAppID(u uuid.UUID) *TransferUpdate {
	tu.mutation.SetAppID(u)
	return tu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableAppID(u *uuid.UUID) *TransferUpdate {
	if u != nil {
		tu.SetAppID(*u)
	}
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TransferUpdate) SetUserID(u uuid.UUID) *TransferUpdate {
	tu.mutation.SetUserID(u)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableUserID(u *uuid.UUID) *TransferUpdate {
	if u != nil {
		tu.SetUserID(*u)
	}
	return tu
}

// SetTargetUserID sets the "target_user_id" field.
func (tu *TransferUpdate) SetTargetUserID(u uuid.UUID) *TransferUpdate {
	tu.mutation.SetTargetUserID(u)
	return tu
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableTargetUserID(u *uuid.UUID) *TransferUpdate {
	if u != nil {
		tu.SetTargetUserID(*u)
	}
	return tu
}

// Mutation returns the TransferMutation object of the builder.
func (tu *TransferUpdate) Mutation() *TransferMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransferUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransferUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransferUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransferUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransferUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if transfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transfer.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TransferUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransferUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfer.Table,
			Columns: transfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transfer.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldEntID,
		})
	}
	if value, ok := tu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldAppID,
		})
	}
	if value, ok := tu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldUserID,
		})
	}
	if value, ok := tu.mutation.TargetUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldTargetUserID,
		})
	}
	_spec.Modifiers = tu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TransferUpdateOne is the builder for updating a single Transfer entity.
type TransferUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransferUpdateOne) SetCreatedAt(u uint32) *TransferUpdateOne {
	tuo.mutation.ResetCreatedAt()
	tuo.mutation.SetCreatedAt(u)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableCreatedAt(u *uint32) *TransferUpdateOne {
	if u != nil {
		tuo.SetCreatedAt(*u)
	}
	return tuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tuo *TransferUpdateOne) AddCreatedAt(u int32) *TransferUpdateOne {
	tuo.mutation.AddCreatedAt(u)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransferUpdateOne) SetUpdatedAt(u uint32) *TransferUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(u)
	return tuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tuo *TransferUpdateOne) AddUpdatedAt(u int32) *TransferUpdateOne {
	tuo.mutation.AddUpdatedAt(u)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransferUpdateOne) SetDeletedAt(u uint32) *TransferUpdateOne {
	tuo.mutation.ResetDeletedAt()
	tuo.mutation.SetDeletedAt(u)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableDeletedAt(u *uint32) *TransferUpdateOne {
	if u != nil {
		tuo.SetDeletedAt(*u)
	}
	return tuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tuo *TransferUpdateOne) AddDeletedAt(u int32) *TransferUpdateOne {
	tuo.mutation.AddDeletedAt(u)
	return tuo
}

// SetEntID sets the "ent_id" field.
func (tuo *TransferUpdateOne) SetEntID(u uuid.UUID) *TransferUpdateOne {
	tuo.mutation.SetEntID(u)
	return tuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableEntID(u *uuid.UUID) *TransferUpdateOne {
	if u != nil {
		tuo.SetEntID(*u)
	}
	return tuo
}

// SetAppID sets the "app_id" field.
func (tuo *TransferUpdateOne) SetAppID(u uuid.UUID) *TransferUpdateOne {
	tuo.mutation.SetAppID(u)
	return tuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableAppID(u *uuid.UUID) *TransferUpdateOne {
	if u != nil {
		tuo.SetAppID(*u)
	}
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TransferUpdateOne) SetUserID(u uuid.UUID) *TransferUpdateOne {
	tuo.mutation.SetUserID(u)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableUserID(u *uuid.UUID) *TransferUpdateOne {
	if u != nil {
		tuo.SetUserID(*u)
	}
	return tuo
}

// SetTargetUserID sets the "target_user_id" field.
func (tuo *TransferUpdateOne) SetTargetUserID(u uuid.UUID) *TransferUpdateOne {
	tuo.mutation.SetTargetUserID(u)
	return tuo
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableTargetUserID(u *uuid.UUID) *TransferUpdateOne {
	if u != nil {
		tuo.SetTargetUserID(*u)
	}
	return tuo
}

// Mutation returns the TransferMutation object of the builder.
func (tuo *TransferUpdateOne) Mutation() *TransferMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransferUpdateOne) Select(field string, fields ...string) *TransferUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transfer entity.
func (tuo *TransferUpdateOne) Save(ctx context.Context) (*Transfer, error) {
	var (
		err  error
		node *Transfer
	)
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transfer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransferMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransferUpdateOne) SaveX(ctx context.Context) *Transfer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransferUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransferUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransferUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if transfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transfer.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TransferUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransferUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TransferUpdateOne) sqlSave(ctx context.Context) (_node *Transfer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfer.Table,
			Columns: transfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transfer.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfer.FieldID)
		for _, f := range fields {
			if !transfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldEntID,
		})
	}
	if value, ok := tuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldAppID,
		})
	}
	if value, ok := tuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldUserID,
		})
	}
	if value, ok := tuo.mutation.TargetUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldTargetUserID,
		})
	}
	_spec.Modifiers = tuo.modifiers
	_node = &Transfer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
